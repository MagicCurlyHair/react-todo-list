{"version":3,"sources":["components/Input.jsx","components/Task.jsx","components/TodoList.jsx","components/CompletedList.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","_ref","textInput","handleInput","addTask","react_default","a","createElement","className","type","placeholder","value","onChange","onClick","Task","task","id","list","deleteTask","changeTask","text","data-id","data-list","TodoList","todo","completeTask","reduceRight","acc","index","push","key","components_Task","CompletedList","completed","uncompleteTask","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","setState","target","toConsumableArray","concat","taskIndex","parentNode","dataset","newList","deleted","splice","defineProperty","otherList","components_Input","components_TodoList","components_CompletedList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e84f8de.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Input({textInput, handleInput, addTask}) {\r\n  return( \r\n  <div className=\"input-section\">\r\n    <input className=\"task-input\" type=\"text\" placeholder=\"Your task...\" \r\n      value={textInput} onChange={handleInput}></input>\r\n    <button className=\"button-add\" onClick={addTask}><i className=\"fas fa-plus\"></i> Add Task</button>\r\n  </div>\r\n  )};\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\nfunction Task({task, id, list, deleteTask, changeTask}) {\r\n  const {text} = task;\r\n  return(\r\n    <div className=\"task\" data-id={id} data-list={list}>\r\n      <div className=\"task-text\"><span>{text}</span></div>\r\n      <button className=\"button-check\" onClick={changeTask}><i className=\"fas fa-check icon-disabled\"></i></button>\r\n      <button className=\"button-delete\" onClick={deleteTask}><i className=\"fas fa-trash-alt icon-disabled\"></i></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nfunction TodoList({todo, deleteTask, completeTask}) {\r\n  return(\r\n    <div className=\"todo\">\r\n      <ul>\r\n        {/* uses reduceRight so that latest item in the list is always at the top*/}\r\n        {todo.reduceRight((acc, task, index) => {\r\n          acc.push(<li key={index}><Task task={task} id={index} list={\"todo\"} deleteTask={deleteTask} changeTask={completeTask}/></li>);\r\n          return acc;\r\n        }, [])}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nfunction CompletedList({completed, deleteTask, uncompleteTask}) {\r\n  return(\r\n    <div className=\"completed\">\r\n      <ul>\r\n        {/* uses reduceRight so that latest item in the list is always at the top*/}\r\n        {completed.reduceRight((acc, task, index) => {\r\n          acc.push(<li key={index}><Task task={task} id={index} list={\"completed\"} deleteTask={deleteTask} changeTask={uncompleteTask}/></li>);\r\n          return acc;\r\n        }, [])}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompletedList;","import React, { Component } from 'react';\nimport './App.css';\nimport Input from \"./components/Input\";\nimport TodoList from \"./components/TodoList\";\nimport CompletedList from \"./components/CompletedList\"\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {todo: [], completed: [], textInput: \"\"};\n    this.handleInput = this.handleInput.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n    this.changeTask = this.changeTask.bind(this);\n  }\n\n  handleInput(event) {\n    this.setState({textInput: event.target.value});\n  }\n\n  addTask() {\n    if (this.state.textInput){\n      this.setState({todo: [...this.state.todo, {text: this.state.textInput}], textInput: \"\"});\n    }\n  }\n\n  deleteTask(event) {\n    const taskIndex = event.target.parentNode.dataset.id;\n    const list = event.target.parentNode.dataset.list;\n    const newList = [...this.state[list]];\n    const deleted = newList.splice(taskIndex, 1);\n    this.setState({[list]: newList});\n    return deleted;\n  }\n\n  changeTask(event) {\n    const task = this.deleteTask(event)[0];\n    const list = event.target.parentNode.dataset.list;\n    let otherList = \"\";\n    list === \"todo\" ? otherList = \"completed\": otherList = \"todo\";\n    const newList = [...this.state[otherList]];\n    newList.push(task);\n    this.setState({[otherList]: newList});\n  }\n\n  uncompleteTask(event) {\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Input textInput={this.state.textInput} handleInput={this.handleInput} addTask={this.addTask}/>\n        <TodoList todo={this.state.todo} deleteTask={this.deleteTask} completeTask={this.changeTask}/>\n        <CompletedList completed={this.state.completed} deleteTask={this.deleteTask} uncompleteTask={this.changeTask}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}