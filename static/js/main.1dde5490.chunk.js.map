{"version":3,"sources":["Input.jsx","Task.jsx","TodoList.jsx","CompletedList.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","_ref","textInput","handleInput","addTask","react_default","a","createElement","className","type","placeholder","value","onChange","onClick","Task","task","id","list","deleteTask","changeTask","text","taskClass","completed","data-id","data-list","TodoList","todo","reduceRight","acc","index","push","key","src_Task","CompletedList","this","props","length","document","getElementById","style","visibility","_this$props","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","setState","target","toConsumableArray","concat","taskIndex","parentNode","dataset","newList","deleted","splice","defineProperty","otherList","src_Input","src_TodoList","src_CompletedList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dde5490.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Input({textInput, handleInput, addTask}) {\r\n  return( \r\n  <div className=\"input-section\">\r\n    <input className=\"task-input\" type=\"text\" placeholder=\"Your task...\" \r\n      value={textInput} onChange={handleInput}></input>\r\n    <button className=\"button-add\" onClick={addTask}><i className=\"fas fa-plus\"></i> Add Task</button>\r\n  </div>\r\n  )};\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\nfunction Task({task, id, list, deleteTask, changeTask}) {\r\n  const {text, completed} = task;\r\n  let taskClass = \"\";\r\n  completed? taskClass = \"task done\": taskClass = \"task\";\r\n  return(\r\n    <div className={taskClass} data-id={id} data-list={list}>\r\n      <div className=\"task-text\"><span>{text}</span></div>\r\n      <button className=\"button-check\" onClick={changeTask}><i className=\"fas fa-check icon-disabled\"></i></button>\r\n      <button className=\"button-delete\" onClick={deleteTask}><i className=\"fas fa-trash-alt icon-disabled\"></i></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nfunction TodoList({todo, deleteTask, changeTask}) {\r\n  return(\r\n    <div className=\"todo\">\r\n      <ul>\r\n        {/* uses reduceRight so that latest item in the list is always at the top*/}\r\n        {todo.reduceRight((acc, task, index) => {\r\n          task.completed = false;\r\n          acc.push(<li key={index}><Task task={task} id={index} list={\"todo\"} deleteTask={deleteTask} changeTask={changeTask}/></li>);\r\n          return acc;\r\n        }, [])}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nclass CompletedList extends Component {\r\n  componentDidUpdate(){\r\n    if (this.props.completed.length !== 0){\r\n      document.getElementById(\"completed\").style.visibility = \"visible\";\r\n    }\r\n    else document.getElementById(\"completed\").style.visibility = \"hidden\";\r\n  }\r\n  render(){\r\n    const {completed, deleteTask, changeTask} = this.props;\r\n    return(\r\n      <div className=\"completed\" id=\"completed\">\r\n        <ul>\r\n          {/* uses reduceRight so that latest item in the list is always at the top*/}\r\n          {completed.reduceRight((acc, task, index) => {\r\n            task.completed = true;\r\n            acc.push(<li key={index}><Task task={task} id={index} list={\"completed\"} deleteTask={deleteTask} changeTask={changeTask}/></li>);\r\n            return acc;\r\n          }, [])}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default CompletedList;","import React, { Component } from 'react';\nimport './App.css';\nimport Input from \"./Input\";\nimport TodoList from \"./TodoList\";\nimport CompletedList from \"./CompletedList\"\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {todo: [], completed: [], textInput: \"\"};\n    this.handleInput = this.handleInput.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n    this.changeTask = this.changeTask.bind(this);\n  }\n\n  handleInput(event) {\n    this.setState({textInput: event.target.value});\n  }\n\n  addTask() {\n    if (this.state.textInput){\n      this.setState({todo: [...this.state.todo, {text: this.state.textInput, completed: false}], textInput: \"\"});\n    }\n  }\n\n  deleteTask(event) {\n    const taskIndex = event.target.parentNode.dataset.id;\n    const list = event.target.parentNode.dataset.list;\n    const newList = [...this.state[list]];\n    const deleted = newList.splice(taskIndex, 1);\n    this.setState({[list]: newList});\n    return deleted;\n  }\n\n  changeTask(event) {\n    const task = this.deleteTask(event)[0];\n    const list = event.target.parentNode.dataset.list;\n    let otherList = \"\";\n    list === \"todo\" ? otherList = \"completed\": otherList = \"todo\";\n    const newList = [...this.state[otherList]];\n    newList.push(task);\n    this.setState({[otherList]: newList});\n  }\n\n  uncompleteTask(event) {\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Input textInput={this.state.textInput} handleInput={this.handleInput} addTask={this.addTask}/>\n        <TodoList todo={this.state.todo} deleteTask={this.deleteTask} changeTask={this.changeTask}/>\n        <CompletedList completed={this.state.completed} deleteTask={this.deleteTask} changeTask={this.changeTask}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}